<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>iot - Tag - DrosoCode</title><link>https://thomasz.me/tags/iot/</link><description>iot - Tag - DrosoCode</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>contact@thomasz.me (droso)</managingEditor><webMaster>contact@thomasz.me (droso)</webMaster><lastBuildDate>Mon, 30 May 2022 00:00:00 +0100</lastBuildDate><atom:link href="https://thomasz.me/tags/iot/" rel="self" type="application/rss+xml"/><item><title>Create your own ambilight solution</title><link>https://thomasz.me/2022/05/30/create-you-own-ambilight-solution/</link><pubDate>Mon, 30 May 2022 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2022/05/30/create-you-own-ambilight-solution/</guid><description>Ambilight is a technology of Bias lighting used in Phillips TVs which illumitates the back of your tv with colors related to the image displayed. Their solution is expensive, but you can create your own solution using an ESP 8266 controller and some cheap led strips.
In order to adapt the lights to the image, the ambilight system needs to capture the images displayed on your tv. There are 2 main ways to do that: you can use a physical box to capture the video using an HDMI splitter and an acquisition card between your devices (Mi Box, Nvidia Shield, Xbox &amp;hellip;) and your TV or you can use a software solution to directly stream the video from a device (PC, Android TV &amp;hellip;).</description></item><item><title>Easily create you DIY IoT devices with ESP Home and Home Assistant</title><link>https://thomasz.me/2022/01/14/easily-create-you-diy-iot-devices-with-esp-home-and-home-assistant/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2022/01/14/easily-create-you-diy-iot-devices-with-esp-home-and-home-assistant/</guid><description>When I started to tinker with home automation and electronics a few years ago, it was common to use arduino cards to create DIY connected devices. You would then communicate with a central server to send and receive information. The communications were usually done using usb, ethernet (using an ethernet shield) or radio (2.4Ghz or 433Mhz) with projects like MySensors.
Most of the time these cards were programmed using the “Arduino language” which is quite close to C++.</description></item><item><title>Control your lights with a Nintendo DS</title><link>https://thomasz.me/2020/11/03/control-your-light-with-a-nintendo-ds/</link><pubDate>Tue, 03 Nov 2020 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2020/11/03/control-your-light-with-a-nintendo-ds/</guid><description>Introduction A few months ago, I stumbled upon the DS Linux project while browsing the internet. The project is not actively developed anymore (which was to expect as the DS is a pretty old device with the first model released in 2004). However, working builds are available on their website here and I wanted to play a bit with it.
Installation According to the project’s website, DS Linux is compatible with the original DS and the DS Lite (this is the one that I own), and maybe the newer models in compatibility mode.</description></item></channel></rss>