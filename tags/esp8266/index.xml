<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>esp8266 - Tag - DrosoCode</title><link>https://thomasz.me/tags/esp8266/</link><description>esp8266 - Tag - DrosoCode</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>contact@thomasz.me (droso)</managingEditor><webMaster>contact@thomasz.me (droso)</webMaster><lastBuildDate>Mon, 29 Nov 2021 00:00:00 +0100</lastBuildDate><atom:link href="https://thomasz.me/tags/esp8266/" rel="self" type="application/rss+xml"/><item><title>Upgrading your RGB with WLED, Aurora and OpenRGB</title><link>https://thomasz.me/2021/11/29/upgrading-your-rgb-with-wled-aurora-and-openrgb/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2021/11/29/upgrading-your-rgb-with-wled-aurora-and-openrgb/</guid><description>I was always interested in going furether than the pre-made RGB equipement by various manufacturers because each system was only compatible with only one brand (ex: iCUE, RGB Fusion, Asus RGB …) and that their RGB softwares were very unfinished and didn’t exploit the full potential of the RGB hardware.
First Attempt So, when I built my first desktop PC, I decided to create from scratch a custom RGB system. This was based on an arduino board, internally connected to my PC using USB.</description></item></channel></rss>