<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>arduino - Tag - DrosoCode</title><link>https://thomasz.me/tags/arduino/</link><description>arduino - Tag - DrosoCode</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>contact@thomasz.me (droso)</managingEditor><webMaster>contact@thomasz.me (droso)</webMaster><lastBuildDate>Mon, 30 May 2022 00:00:00 +0100</lastBuildDate><atom:link href="https://thomasz.me/tags/arduino/" rel="self" type="application/rss+xml"/><item><title>Create your own ambilight solution</title><link>https://thomasz.me/2022/05/30/create-you-own-ambilight-solution/</link><pubDate>Mon, 30 May 2022 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2022/05/30/create-you-own-ambilight-solution/</guid><description>Ambilight is a technology of Bias lighting used in Phillips TVs which illumitates the back of your tv with colors related to the image displayed. Their solution is expensive, but you can create your own solution using an ESP 8266 controller and some cheap led strips.
In order to adapt the lights to the image, the ambilight system needs to capture the images displayed on your tv. There are 2 main ways to do that: you can use a physical box to capture the video using an HDMI splitter and an acquisition card between your devices (Mi Box, Nvidia Shield, Xbox &amp;hellip;) and your TV or you can use a software solution to directly stream the video from a device (PC, Android TV &amp;hellip;).</description></item><item><title>Easily create you DIY IoT devices with ESP Home and Home Assistant</title><link>https://thomasz.me/2022/01/14/easily-create-you-diy-iot-devices-with-esp-home-and-home-assistant/</link><pubDate>Fri, 14 Jan 2022 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2022/01/14/easily-create-you-diy-iot-devices-with-esp-home-and-home-assistant/</guid><description>When I started to tinker with home automation and electronics a few years ago, it was common to use arduino cards to create DIY connected devices. You would then communicate with a central server to send and receive information. The communications were usually done using usb, ethernet (using an ethernet shield) or radio (2.4Ghz or 433Mhz) with projects like MySensors.
Most of the time these cards were programmed using the “Arduino language” which is quite close to C++.</description></item><item><title>Upgrading your RGB with WLED, Aurora and OpenRGB</title><link>https://thomasz.me/2021/11/29/upgrading-your-rgb-with-wled-aurora-and-openrgb/</link><pubDate>Mon, 29 Nov 2021 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2021/11/29/upgrading-your-rgb-with-wled-aurora-and-openrgb/</guid><description>I was always interested in going furether than the pre-made RGB equipement by various manufacturers because each system was only compatible with only one brand (ex: iCUE, RGB Fusion, Asus RGB …) and that their RGB softwares were very unfinished and didn’t exploit the full potential of the RGB hardware.
First Attempt So, when I built my first desktop PC, I decided to create from scratch a custom RGB system. This was based on an arduino board, internally connected to my PC using USB.</description></item><item><title>Wake on Lan and Dual Boot</title><link>https://thomasz.me/2020/10/06/wake-on-lan-and-dual-boot/</link><pubDate>Tue, 06 Oct 2020 00:00:00 +0100</pubDate><author>Author</author><guid>https://thomasz.me/2020/10/06/wake-on-lan-and-dual-boot/</guid><description>Introduction Wake on Lan is a technology delvelopped in 1995, that allows you to start a computer by sending a magic packet (usually in udp). I use it since a few years and it is especially useful when you are in a remote place, you can just start your computer and connect to it through rdp. The only problem is that this approach is not really suitable for dual-boot setups.</description></item></channel></rss>